import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.lang.*;

public class Solution {
    
    int score(int board[], int player){
        
        int score = 0;
        
        int player1Mancala = board[0];
        int player2Mancala = board[2];
        int[] player1Marbles = board[1];
        int[] player1Marbles = board[3];

        if(player == 1){
            score = (player1Marbles - player2Marbles) + ((player1Mancala - player2Mancala) * 2);    
        }else if(player == 2){
            score = (player2Marbles - player1Marbles) + ((player2Mancala - player1Mancala) * 2);
        }
        
        return score;
    }
    
    int makeMove(int[] board, int player, int move){ 
        int player1Mancala = board[0];
        int player2Mancala = board[2];
        int[] player1Marbles = board[1];
        int[] player1Marbles = board[3];
        int marblesToMove = 0;
        int spot = move;

        
        if(player == 1){
            marblesToMove = player1Marbles[move];
            player1Marbles[move] = 0;
        }else{
            marblesToMove = player2Marbles[move];
            player2Marbles[move] = 0;
        }
                
        while(marblesToMove > 0){
            if(player == 1){
                int marbleSide = player1Marbles;
                //Get distance to the end of players marbles spot
                int distanceToMancala = player1Marbles.length() - spot;

                //Check if mancala is next spot
                if(distanceToMancala == 0){
                    /*Add 1 to player 1's mancala and then switch the 
                    current marbles side being added to the player 2's side
                    */
                    ++player1Mancala;
                    spot = 1;
                    marbleSide = player2Marbles;
                }else if(marblesToMove !- 0){
                    /*add 1 to the next moves spot, move to next spot and evaluate
                    */
                    ++marbleSide[spot+1];
                    ++spot;
                }else{
                    //Done making move
                    return score(board[], player);
                }
            }else{
                int marbleSide = player2Marbles;
                //Get distance to the end of players marbles spot
                int distanceToMancala = player2Marbles.length() - spot;

                //Check if mancala is next spot
                if(distanceToMancala == 0){
                    /*Add 1 to player 1's mancala and then switch the 
                    current marbles side being added to the player 2's side
                    */
                    ++player1Mancala;
                    spot = 1;
                    marbleSide = player1Marbles;
                }else if(marblesToMove !- 0){
                    /*add 1 to the next moves spot, move to next spot and evaluate
                    */
                    ++marbleSide[spot+1];
                    ++spot;
                }else{
                    //Done making move
                    return score(board[], player);
                }
            }
        }
    }
    
    int findMove(int[] board, int player){
        int player1Mancala = board[0];
        int player2Mancala = board[2];
        int[] player1Marbles = board[1];
        int[] player1Marbles = board[3];
        
        int move = Integer.MIN_VALUE;
        int bestScore = Integer.MIN_VALUE;
        
        return move;
    }

    static void printNextMove(int player, int player1Mancala, int[] player1Marbles, int player2Mancala, int[] player2Marbles) {
     
        
        //Represent the mancala board
        int[] board = new int[player1Mancala, player1Marbles, player2Mancala, player2Marbles];
        
        //Find next move
    }

   public static void main(String[] args) {
        //Player is defined as next integer in system input stream buffer
        Scanner in = new Scanner(System.in);
        int _player;
        _player = in.nextInt();
        
        //Player one's mancala is defined as the next integer in the system input stream buffer
        int _player1Mancala;
        _player1Mancala = in.nextInt();
        
        //Integer representing the amount of marble positions
        int _player1Marbles_size = 6;
        //Integer array representing the row of marbles with specified size
        int[] _player1Marbles = new int[_player1Marbles_size];
        //Integer representing the amount of marbles in the spot
        int _player1Marbles_item;
        //Iterate through each marble position
        for(int _player1Marbles_i = 0; _player1Marbles_i < _player1Marbles_size; _player1Marbles_i++) {
            //Amount of marbles in the current players marble position are the next number in input stream buffer
            _player1Marbles_item = in.nextInt();
            _player1Marbles[_player1Marbles_i] = _player1Marbles_item;
        }
       
        //Player two's mancala is defined as the next integer in the system input stream buffer
        int _player2Mancala;
        _player2Mancala = in.nextInt();
        
        //Integer representing the amount of marble positions
        int _player2Marbles_size = 6;        
        //Integer array representing the row of marbles with specified size
        int[] _player2Marbles = new int[_player2Marbles_size];
        //Integer representing the amount of marbles in the spot
        int _player2Marbles_item;
        //Add 1 to the marbles until size is reached
        for(int _player2Marbles_i = 0; _player2Marbles_i < _player2Marbles_size; _player2Marbles_i++) {
            //Amount of marbles in the current players marble position are the next number in input stream buffer
            _player2Marbles_item = in.nextInt();
            _player2Marbles[_player2Marbles_i] = _player2Marbles_item;
        }
        
        //Print next move with the current player and the curent state of mancala counts and marbles
        printNextMove(_player, _player1Mancala, _player1Marbles, _player2Mancala, _player2Marbles);
        
    }
}
