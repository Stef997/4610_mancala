/*
February 8th 2020

A Mancala bot which uses a greedy algorithm approach to find the moves which keeps
the most marbles possible in the bots mancala and on the bots side of the board  
*/

import java.util.Scanner;
import java.lang.Integer;

public class Solution {
    static void printNextMove(int player, int player1Mancala, int[] player1Marbles, 
                              int player2Mancala, int[] player2Marbles) {
        
        //All the scores for the move available
        int[] allScores = new int[6];
        
        //Next score and mvoe nitialized to a minimum value and replaced by the first move found
        int bestMove = Integer.MIN_VALUE;
        int bestScore = Integer.MIN_VALUE;
        
        //Switch boards depending on player
        if(player == 2) {
            player1Marbles = player2Marbles;
            player2Marbles = player1Marbles;
        }

        //Check the game state for all available moves
        for(int i = 0; i < 6; i++) {
            if(player1Marbles[i] > 0) {
                //Get the score of the move
                allScores[i] = moveMarbles(i, player1Marbles, player2Marbles, player1Mancala, player2Mancala);
                //Update the best score if the score of the next move is higher or if a move has not been found
                if(bestMove >= 0 || allScores[i] > bestScore) {
                    bestMove = i;
                    bestScore = allScores[i];
                }
            }
        }
        
        System.out.print(bestMove + 1);
    }
    
    static int moveMarbles(int move, int[] player1Marbles, int[] player2Marbles, 
                           int player1Mancala, int player2Mancala) {
        //Represent marble position and the value of marbles at the current position
        int[] p1Marbles = new int [6];
        int[] p2Marbles = new int [6];
        int p1Mancala = player1Mancala;
        
        //The current spot being maniplulated
        int spot = move;

        //Score resulting from the move
        int score = 0;

        //Populate the values of the marble positions with the current values of the board
        for(int i = 0; i < 6; i++) {
            p1Marbles[i] = player1Marbles[i];
            p2Marbles[i] = player2Marbles[i];            
        }
        
        //The amount of marbles in the marble position chosen for the move
        int amountToMove = p1Marbles[move];
        
        //If the spot is empty attempt the move
        if(amountToMove > 0) {
            //Empty the current position
            p1Marbles[move] = 0;

            //Continue adding one marble to consecutive positions until no marbles left
            while(amountToMove > 0) {
                //Subtract a marble and move spot to maniplulate to next position
                --amountToMove;
                ++spot;
                
                /*Add one marble to the next position
                Check if next position is player1's marbles positions or opponent's mancala and skip it
                else it must your mancala if it's the 7th position (6th index)
                else it must be player2's marble position (7th-12th index, [0-5 if subtracted by 7])
                */
                if(spot < 6 || (spot - 7) == 6) {
                    if(spot == 13) {
                        spot = 0;
                        p1Marbles[spot]++;
                    } else {
                        p1Marbles[spot]++;
                    }
                } else if (spot == 6) {
                    ++p1Mancala;
                } else {
                    ++p2Marbles[spot-7];   
                } 
            }

            //If the final spot to manipulate is the mancala try another set of moves and choose the best
            if(spot == 6) {
            int nextBestMove = 0;
                for(int i = 0; i < 6; i++) {
                    if(moveMarbles(i, p1Marbles, p2Marbles, p1Mancala, player2Mancala) > nextBestMove) {
                        nextBestMove = moveMarbles(i, p1Marbles, p2Marbles, p1Mancala, player2Mancala);
                    }
                }
            }
            
            //If the final spot is on your side and is empty spot capture the other players marbles
            if(spot < 6 && p1Marbles[spot] == 0){
                p1Marbles[spot] = p2Marbles[spot + 6];
                p2Marbles[spot + 6] = 0;
            }
                
            /*Calculate a heuristic based on the difference between the marbles on 
            your side and the marbles on the opposing side, with a doubled score for
            marbles in your mancala and marbles placed on the right side of your board
            to store as many marbles as possible for when the game ends while capturing
            the most marbles possible.
            */
            int total = 0;
            
            for(int i = 0; i < 3; i++) {
                total = p1Marbles[i] - p2Marbles[i];
            }
            
            for(int i = 3; i < 6; i++){
                if(p1Marbles[i] > 0){
                    total = ((p1Marbles[i] * 2) + p2Marbles[i]);
                }
            }

            score = total + (p1Mancala - player2Mancala)*2;
            
            //Return the score
            return score;   
        } else {
            return Integer.MIN_VALUE;
        }
    }

   public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int _player;
        _player = in.nextInt();
        
        int _player1Mancala;
        _player1Mancala = in.nextInt();
        
        
        int _player1Marbles_size = 6;
        int[] _player1Marbles = new int[_player1Marbles_size];
        int _player1Marbles_item;
        for(int _player1Marbles_i = 0; _player1Marbles_i < _player1Marbles_size; _player1Marbles_i++) {
            _player1Marbles_item = in.nextInt();
            _player1Marbles[_player1Marbles_i] = _player1Marbles_item;
        }
        
        int _player2Mancala;
        _player2Mancala = in.nextInt();
        
       
        int _player2Marbles_size = 6;
        int[] _player2Marbles = new int[_player2Marbles_size];
        int _player2Marbles_item;
        for(int _player2Marbles_i = 0; _player2Marbles_i < _player2Marbles_size; _player2Marbles_i++) {
            _player2Marbles_item = in.nextInt();
            _player2Marbles[_player2Marbles_i] = _player2Marbles_item;
        }
        
        printNextMove(_player, _player1Mancala, _player1Marbles, _player2Mancala, _player2Marbles);
        
    }
}
